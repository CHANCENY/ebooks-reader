<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB" xmlns:epub="http://www.idpf.org/2007/ops">
	<head>
		<title>B19491_08</title>
		<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css" />
	</head>
	<body id="B19491_08">
		<div id="_idContainer051">
			<h1 id="_idParaDest-126" class="chapter-number"><a id="_idTextAnchor223"></a>8</h1>
			<h1 id="_idParaDest-127"><a id="_idTextAnchor224"></a>Content Structures <br />and Multilingual</h1>
			<p><a id="_idTextAnchor225"></a>One of Drupal’s core strengths is its<a id="_idIndexMarker252"></a> ability to model and structure content. Structured data serves as a foundation of <strong class="bold">content management systems</strong> (<strong class="bold">CMSs</strong>) and is arguably one of the most important features of Drupal. Drupal’s implementation is built on the concept of entities, fields, and bundles. Drupal has created features such as <strong class="bold">Nodes</strong>, <strong class="bold">Content Types</strong>, <strong class="bold">Menus</strong>, and <strong class="bold">Taxonomy</strong> from entities. Leveraging these capabilities is fundamental for any Drupal developer. Drupal extends the entity system to support multiple language translations per entity. This chapter reviews the structured content as a concept, with several examples <span class="No-Break">in Drupal.</span></p>
			<p>In this chapter, we’re going to cover the following <span class="No-Break">main topics:</span></p>
			<ul>
				<li>Importance of <span class="No-Break">structured content</span></li>
				<li>Structured content <span class="No-Break">in Drupal</span></li>
				<li><span class="No-Break">Multilingual features</span><a id="_idTextAnchor226"></a></li>
			</ul>
			<h1 id="_idParaDest-128"><a id="_idTextAnchor227"></a>Importance of structured content</h1>
			<p>Drupal has long been viewed<a id="_idIndexMarker253"></a> favorably for its structured content capabilities offered to site builders. So, why is this <span class="No-Break">so important?</span></p>
			<p>Content management went through a bit of an evolution, starting around 1995 when programming languages such as ASP and PHP were introduced. Earlier CMSs ran software that annotated, scanned, and managed content through flat files. Those flat files were either HTML or software-generated HTML. HTML would still require uploads to web servers. While this was fine for simple content updates, content would end up <span class="No-Break">being duplicated.</span></p>
			<p>Take a news article, for instance.. That same news article may be featured on a listing found on every page and have its page with the full article. The listing likely lists the title of the news article and maybe a teaser to lead readers in. However, the title ends up being duplicated on basically any page where the listing is displayed and on the full article. Now, imagine this at scale where updating one news article title could end up updating a large number of pages on the site. It would be difficult to even track the pages manually, let alone <span class="No-Break">perform changes.</span></p>
			<p>Now, consider modern websites. A search feature returns dynamic results based on search terms. Attempting to extend the news article example for every possible search term would be impossible. Imagine trying to create, by hand, search results that accompany terms from <a id="_idIndexMarker254"></a>content managed on multiple pages. This would be overwhelmingly labor-intensive. And, as with any technology, this forced the next phase of <span class="No-Break">content managemen<a id="_idTextAnchor228"></a>t.</span></p>
			<h2 id="_idParaDest-129"><a id="_idTextAnchor229"></a>Relational database best practices</h2>
			<p>Content management solved the <a id="_idIndexMarker255"></a>aforementioned scale problem by harnessing relational databases. Relational databases maintain<a id="_idIndexMarker256"></a> one <strong class="bold">source of truth</strong> (<strong class="bold">SOT</strong>) for content. The same content is then linked where it is related, and querying systems allow for content to be returned that includes <span class="No-Break">linked information.</span></p>
			<p>Understanding the theory behind relational databases is necessary to comprehend structured content. It starts with a concept <a id="_idIndexMarker257"></a>called <strong class="bold">database normalization</strong>. <strong class="bold">First normal form</strong> (<strong class="bold">1NF</strong>) states<a id="_idIndexMarker258"></a> that every field in a database table must only contain one value and not multiple values. For example, a <em class="italic">color</em> field can only contain <em class="italic">red</em> and not <em class="italic">red and blue</em>. This would require <em class="italic">color1</em> with a value of <em class="italic">red</em> and <em class="italic">color2</em> with a value of <em class="italic">blue</em>. <strong class="bold">Second normal form</strong> (<strong class="bold">2NF</strong>) suggests <a id="_idIndexMarker259"></a>you need a primary key that identifies table rows. <strong class="bold">Third normal form</strong> (<strong class="bold">3NF</strong>) suggests that, in favor of repeating information between <a id="_idIndexMarker260"></a>tables, a field in one table should store the value of a primary key to relate and link it to the other data. The three normal forms promote atomic data principles aimed at stronger <span class="No-Break">data integrity.</span></p>
			<p>Structured content borrows all of these concepts. Back to the previous news article search example. A content structure could exist for news articles. News articles could be split into atomic fields, such as key, title, teaser, author, and body. Each row could be a unique article with a unique value for the key. A news article page could display the results of querying against the key, and a search feature could be implemented by querying against the fields in news articles to find matching rows for search terms. All of this extends onto the earlier concepts of content management where the same content was repeated page <span class="No-Break">by page.</span></p>
			<p>The notion of <a id="_idIndexMarker261"></a>incorporating a relational database to manage content solved the scale problem by avoiding content repetition. Data integrity is then promoted, even if there is still discretion in how content is structured. Relational databases that avoid content replication also promote a clear SOT where one table maintains all of the related, atomic attributes. Other tables can link to the key of the SSOT in contrast to copying the same data from <span class="No-Break">th<a id="_idTextAnchor230"></a>e table.</span></p>
			<h1 id="_idParaDest-130"><a id="_idTextAnchor231"></a>Structured content in Drupal</h1>
			<p>Drupal harnesses structured content<a id="_idIndexMarker262"></a> as one of its foundational features. Several Drupal features rely on its structured data, such as rendering variables to specific field values in theme templates and being able to configure search behaviors for <span class="No-Break">content-relat<a id="_idTextAnchor232"></a>ed fields.</span></p>
			<h2 id="_idParaDest-131"><a id="_idTextAnchor233"></a>Entities, types, and bundles</h2>
			<p>Drupal harnesses its Entity subsystem for the management of structured content, metadata, and data. This subsystem unifies operations around all entities for consistency. As an example, Drupal’s subsystem manages all CRUD operations for entities. Such operations properly log transactions in Drupal’s watchdog, clean up Drupal’s cache, and more. Drupal features are largely interoperable and harness several entities, and that is a critical part of Drupal’s <span class="No-Break">value proposition.</span></p>
			<p>Harnessing the subsystem receives the benefit of its features. Developers have access to the entity storage system, which abstracts the underlying implementation details for how entities are persistently stored. An access system exists to bridge permissions <span class="No-Break">to entities.</span></p>
			<p>An <strong class="bold">entity</strong> can be<a id="_idIndexMarker263"></a> considered one content structure. The implementation details are managed by Drupal. Entities manage both their properties (metadata) and their fields. To extend the relational database analogy, an entity is similar to a database table. The rows of the table would be the instances of <span class="No-Break">the entity.</span></p>
			<p>Entity types<a id="_idIndexMarker264"></a> help create different structures with their own properties and fields. This differentiation allows for both a logical categorization and functional or behavioral changes to exist between different types of entities. Each entity type would be its database table, where an entity type can manage its specific <span class="No-Break">structured data.</span></p>
			<p>Entities harness a UUID to <a id="_idIndexMarker265"></a>uniquely identify instances of the entity. Similar to the concept of a key, this allows an instance of an entity to be referenced. Entities can then reference other entities by linking to their UUID within their content structure. This logic is abstracted through Drupal’s UI for usability, where end users often can select from a list of human-readable attributes and not a machine-generated UUID. However, being able to build a relationship between an instance of one entity to another instance helps <span class="No-Break">avoid<a id="_idTextAnchor234"></a> duplication.</span></p>
			<h2 id="_idParaDest-132"><a id="_idTextAnchor235"></a>Fields and field types</h2>
			<p>Entities harness fields to structure content, but entities are not required to have fields. An entity that has fields<a id="_idIndexMarker266"></a> is known as <strong class="bold">fieldable</strong>, and each field instance can be configured based on the entity, such as the <a id="_idIndexMarker267"></a>name of the field, whether the field is required or not, the cardinality of the values, and more. Field settings associate back to the configuration of <span class="No-Break">the entity.</span></p>
			<p>Fields in Drupal go well beyond an atomic value in a relational database table. Drupal’s framework offers various services that are extensible through module development. A summary of those is <span class="No-Break">provided here:</span></p>
			<ul>
				<li><strong class="bold">Field storage</strong>: Ability to<a id="_idIndexMarker268"></a> change the underlying data model for how a field gets stored in <span class="No-Break">Drupal’s database</span></li>
				<li><strong class="bold">Field validators</strong>: Specific <a id="_idIndexMarker269"></a>logic that checks field values to promote <span class="No-Break">data integrity</span></li>
				<li><strong class="bold">Field widgets</strong>: Definitions <a id="_idIndexMarker270"></a>of the UI experience for managing field data within <span class="No-Break">a form</span></li>
				<li><strong class="bold">Field formatters</strong>: Options and <a id="_idIndexMarker271"></a>definitions for displaying <span class="No-Break">field values</span></li>
				<li><strong class="bold">Field types</strong>: The<a id="_idIndexMarker272"></a> native selection of the type of data used for a field that has specific storage, validation, for<a id="_idTextAnchor236"></a>matters, <span class="No-Break">and widgets</span></li>
			</ul>
			<h2 id="_idParaDest-133"><a id="_idTextAnchor237"></a>Base entities</h2>
			<p>All entities <a id="_idIndexMarker273"></a>have a base. A <strong class="bold">base</strong> helps define the fields and properties of that entity type that must be shared. Some entity types may only have a base, but a <strong class="bold">bundle</strong> allows<a id="_idIndexMarker274"></a> for a base to be extended with its additional fields. This is a means of having parity between bundles of the same entity, given the bundles will all share the same base f<a id="_idTextAnchor238"></a>ields <span class="No-Break">and properties.</span></p>
			<h2 id="_idParaDest-134"><a id="_idTextAnchor239"></a>Content entities</h2>
			<p>A content entity<a id="_idIndexMarker275"></a> is a primary capability of the entity subsystem intended to create entity types that have complementary features and support tied to content management. This extends many of the base-level features of any entity but integrates effectively with other content-related features in Drupal. Such features include content rendering, revisioning, authoring-related properties, and more. Content entities also have translation support, which is discussed in greater length<a id="_idTextAnchor240"></a> later in <span class="No-Break">this chapter.</span></p>
			<h2 id="_idParaDest-135"><a id="_idTextAnchor241"></a>Entity example for Node</h2>
			<p>The concept of base and bundles is better understood with an example. A <strong class="bold">node</strong> is a type of entity in Drupal <a id="_idIndexMarker276"></a>core that is one of the most used content entities. Every node starts with the same base that has the <span class="No-Break">following information:</span></p>
			<ul>
				<li>Authoring properties, such as the user, date, <span class="No-Break">and time</span></li>
				<li>Revisioning properties that enable tracking and reversion <span class="No-Break">of changes</span></li>
				<li>Multilingual properties, such as the language of <span class="No-Break">the node</span></li>
				<li>Path properties that allow Drupal to route to <span class="No-Break">specific content</span></li>
				<li>Publishing properties, to enable or <span class="No-Break">disable publishing</span></li>
				<li>Title and body fields, which are out-of-the-box fields applied to <span class="No-Break">content types</span></li>
			</ul>
			<p>However, nodes support bundles that allow for the fields to change by bundle. Those bundles are referred to as <strong class="bold">content types</strong>. This <a id="_idIndexMarker277"></a>preserves the base functionality of nodes while allowing for each content type to provide its variation in the <span class="No-Break">structured content.</span></p>
			<p>This is helpful for use cases where the atomic structuring of data changes for different types of content. A simple page structure may be structured with out-of-the-box node title and body fields. A content structure for news articles may extend those fields by adding a featured image and a relevant section (news, sports, opinion, <a id="_idTextAnchor242"></a>classifieds, and <span class="No-Break">so on).</span></p>
			<h2 id="_idParaDest-136"><a id="_idTextAnchor243"></a>Example models</h2>
			<p>Modeling of a<a id="_idIndexMarker278"></a> content type starts with the base, title, and body and then has fields configured per use case. A <strong class="bold">use case</strong> is <a id="_idIndexMarker279"></a>often defined through requirements or design comps that inform how to structure the content type. Suppose a design comp shows a news article mockup with a featured image at the top. A news article content type can be configured to have a <em class="italic">featured image</em> field of type <em class="italic">image</em>. A comp may also show links to related articles. The content type can then be configured to have a <em class="italic">related articles</em> field of type <em class="italic">entity reference</em> to search and create an association <a id="_idTextAnchor244"></a>from one article <span class="No-Break">to others.</span></p>
			<h2 id="_idParaDest-137"><a id="_idTextAnchor245"></a>Configuration entities</h2>
			<p>Configuration entities <a id="_idIndexMarker280"></a>represent a second primary capability for the entity subsystem. Configuration structures can be exported and imported into the system as YAML files known<a id="_idIndexMarker281"></a> as <strong class="bold">configuration schemas</strong> found in Drupal projects. The entity subsystem is leveraged by Drupal’s configuration to structure configuration through the configuration schemas and synchronize configuration between the filesystem and database (active and staged configuration). While it is a different use case compared to content entities, leveraging the entity system affords basic data structuring, data validation, and connectivity betw<a id="_idTextAnchor246"></a>een other <span class="No-Break">Drupal subsystems.</span></p>
			<h2 id="_idParaDest-138"><a id="_idTextAnchor247"></a>Under the hood</h2>
			<p>On the surface, many of the no-code site-building capabilities abstract what is happening within the underlying technical aspects of the Drupal application. It is important to understand these concepts for more advanced development and also for <span class="No-Break">deploying changes.</span></p>
			<p>Content entities, like nodes, are managed through the administrative interface. But what happens if you build a change locally and want to push the change through environments? Changes to content entity settings are tracked and managed by Drupal’s configuration. For deployment, configuration can be synced back to the filesystem and subsequently committed to Git. This allows configuration changes to content entities to be deployed as with any code change. Note that the content itself, not the configuration, represents the SOT principle and must be maintained on a production system and staged down to lower environments <span class="No-Break">for testing.</span></p>
			<p>Drupal’s core API<a id="_idIndexMarker282"></a> allows a framework for extending out-of-the-box entity behavior through modules. Contributed modules exist that offer different types of fields, field storage, various widgets to manage fields and field validators. Custom use cases can be created through custom modules. This level of extensibility can address highly unique enterprise data integration needs while m<a id="_idTextAnchor248"></a>aintaining <span class="No-Break">structured content.</span></p>
			<h2 id="_idParaDest-139"><a id="_idTextAnchor249"></a>Site building</h2>
			<p>One of the benefits of <a id="_idIndexMarker283"></a>Drupal is that it offers no-code features through its administrative UI. This allows for site builders to create structured content without having to get into the code. The node example previously shared is fieldable and offers the ability to manage its fields and content types through Drupal’s <span class="No-Break">administrative experience.</span></p>
			<p>The following screenshot shows the content-type listing<a id="_idIndexMarker284"></a> found at <strong class="bold">Administration</strong> |<strong class="bold"> Structure</strong> | <span class="No-Break"><strong class="bold">Content types</strong></span><span class="No-Break">:</span></p>
			<div>
				<div id="_idContainer042" class="IMG---Figure">
					<img src="image/B19491_08_1.jpg" alt="Figure 8.1 – Content-type listing page" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.1 – Content-type listing page</p>
			<p><span class="No-Break"><em class="italic">Figure 8</em></span><em class="italic">.1</em> not only shows the <a id="_idIndexMarker285"></a>content types but also allows site builders to add their content types and configure existing content types. Adding a content type prompts an administrative form, as shown in <span class="No-Break"><em class="italic">Figure 8</em></span><span class="No-Break"><em class="italic">.2</em></span><span class="No-Break">:</span></p>
			<div>
				<div id="_idContainer043" class="IMG---Figure">
					<img src="image/B19491_08_2.jpg" alt="Figure 8.2 – Step one of adding a content type" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.2 – Step one of adding a content type</p>
			<p>The form in <span class="No-Break"><em class="italic">Figure 8</em></span><em class="italic">.2</em> demonstrates the first step of adding a content type – a form for configuring metadata of a content type. The name and description of the content type help describe what it is. The sections on the left sidebar help perform basic configuration. <strong class="bold">Submission form settings</strong> help configure the experience for users entering content. <strong class="bold">Publishing options</strong> help set sane publishing defaults for when content authors manage content. <strong class="bold">Display settings</strong> control whether or not a node should display author and date information. <strong class="bold">Menu settings</strong> allow for the configuration of relevant menus that nodes of the content type can be <span class="No-Break">added to.</span></p>
			<p>The following screenshot<a id="_idIndexMarker286"></a> shows the second step, which is the field <span class="No-Break">management display:</span></p>
			<div>
				<div id="_idContainer044" class="IMG---Figure">
					<img src="image/B19491_08_3.jpg" alt="Figure 8.3 – Step two of managing fields in a content type" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.3 – Step two of managing fields in a content type</p>
			<p>Given nodes are fieldable and content types (bundles) can maintain their fields, field management is critical for creating atomic content. This screenshot offers options to add fields and manage fields for the content type created, with a default <strong class="source-inline">body</strong> field. This allows for the creation and management of the structured content associated with the <span class="No-Break">content type.</span></p>
			<p>The <strong class="bold">Add field</strong> button<a id="_idIndexMarker287"></a> prompts another multi-step process with various ways to configure fields. Modules can add the types of fields that can appear in this process. It starts with the screen shown in <span class="No-Break"><em class="italic">Figure 8</em></span><em class="italic">.4</em>, which prompts the user to select the type of a new field or associate an existing field to the <span class="No-Break">content type:</span></p>
			<div>
				<div id="_idContainer045" class="IMG---Figure">
					<img src="image/B19491_08_4.jpg" alt="Figure 8.4 – Step one of adding a field to a content type" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.4 – Step one of adding a field to a content type</p>
			<p class="list-inset">The selection of<a id="_idIndexMarker288"></a> field type is important to promote data integrity. As an example, selecting a date type has corresponding field widgets and field validators that help content authors enter correct information. Reference field types extend on the relational database concepts by allowing a field in a content type to reference an instance of another entity.  The following screenshot shows field settings after selecting the type and entering a label for <span class="No-Break">the field:</span></p>
			<div>
				<div id="_idContainer046" class="IMG---Figure">
					<img src="image/B19491_08_5.jpg" alt="Figure 8.5 – Step two of adding a field to a content type" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.5 – Step two of adding a field to a content type</p>
			<p>This form allows <a id="_idIndexMarker289"></a>site builders to configure the settings for the field. Each field type can have its settings. <span class="No-Break"><em class="italic">Figure 8</em></span><em class="italic">.5</em> demonstrates the settings for a date field. The <strong class="bold">Date type</strong> option allows for picking a date only or a date and time. It also allows for setting the cardinality for the field to allow for one value or more. Under the hood, Drupal manages data integrity to avoid the concern of sets of values enforced by 2NF (<a href="https://en.wikipedia.org/wiki/Second_normal_form">https://en.wikipedia.org/wiki/Second_normal_form</a>); it structures its database in a way that honors 2NF but offers the experience of managing a related set in a field for <span class="No-Break">content authors.</span></p>
			<p><span class="No-Break"><em class="italic">Figure 8</em></span><em class="italic">.3</em> allows for managing operations for created fields. The <strong class="source-inline">body</strong> field, created by default with a new content type, has operations for editing, storage, and deletion. <strong class="bold">Edit</strong> prompts the same configurable settings found in <span class="No-Break"><em class="italic">Figure 8</em></span><em class="italic">.5</em>, specific to the settings for the selected type <span class="No-Break">of field.</span></p>
			<p>There are more<a id="_idIndexMarker290"></a> ways to configure content types. <span class="No-Break"><em class="italic">Figure 8</em></span><em class="italic">.3</em> has tabs at the top row for the <span class="No-Break">following actions:</span></p>
			<ul>
				<li><strong class="bold">Edit</strong>: This allows for changing the settings of the content type found in <span class="No-Break"><em class="italic">Figure 8</em></span><span class="No-Break"><em class="italic">.2</em></span><span class="No-Break">.</span></li>
				<li><strong class="bold">Manage fields</strong>: This manages fields for the content type found in <span class="No-Break"><em class="italic">Figure 8</em></span><span class="No-Break"><em class="italic">.3</em></span><span class="No-Break">.</span></li>
				<li><strong class="bold">Manage form display</strong>: This tab allows for customizing the content authoring experience around the content type’s structured content (reorder form fields, change labels, <span class="No-Break">and more).</span></li>
				<li><strong class="bold">Manage display</strong>: This tab manages how a content type is rendered for view modes (<span class="No-Break">detailed next).</span></li>
				<li><strong class="bold">Manage permissions</strong>: These actions show a subset of Drupal’s administrative permission management specific to the content type. It allows for associating user roles to specific actions for the content type, such as creating nodes of that content type, editing nodes of the content type, and deleting content (<span class="No-Break">CRUD operations).</span></li>
			</ul>
			<p><strong class="bold">Manage display</strong> is a useful tool for site builders to control how content is rendered in different circumstances. The following screenshot, which can be modified by modules, shows the <strong class="bold">Manage display</strong> tab for a <span class="No-Break">content type:</span></p>
			<div>
				<div id="_idContainer047" class="IMG---Figure">
					<img src="image/B19491_08_6.jpg" alt="Figure 8.6 – The Manage display tab of a content type" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.6 – The Manage display tab of a content type</p>
			<p>The top<a id="_idIndexMarker291"></a> tabs list out enabled view modes. A view mode is nothing more than a type of display enabled for a content type that can have its settings to render the same content in different ways. Under <strong class="bold">Custom display settings</strong>, a site builder can associate which view modes are enabled for the content type, therefore creating a new tab on the top of the content type’s <strong class="bold">Manage display</strong> page. Every view mode can configure the order of the fields, disable or enable which fields show up, and configure specific settings for the label and format of the data rendered. This allows for site builders to rapidly create different displays for the <span class="No-Break">same content.</span></p>
			<p>Nodes effectively demonstrate the features of entities, structured content, and the no-code value <a id="_idTextAnchor250"></a>Drupal offers for <span class="No-Break">site builders.</span></p>
			<h2 id="_idParaDest-140"><a id="_idTextAnchor251"></a>Applying to other features</h2>
			<p>Given that the entity subsystem is fairly foundational in Drupal, users can expect a fairly seamless integration with other Drupal features. It is difficult to capture an exhaustive list of how entities are integrated throughout all of Drupal’s features, but one of the main benefits of Drupal is that it has been built to work across the core subsystems. There are no assurances that features and integrations between features are fully bug-free or that certain edge cases may not yet work, but the entity subsystem is largely an example of a <span class="No-Break">well-integrated subsystem.</span></p>
			<p><strong class="bold">Views</strong> are<a id="_idIndexMarker292"></a> one of the most powerful features of Drupal, and it is well integrated with entities. Views are covered in depth in <a href="B19491_10.xhtml#_idTextAnchor293"><span class="No-Break"><em class="italic">Chapter 10</em></span></a>, but it is best summarized by Drupal’s querying and dynamic data retrieval capability. Views can create pages, Drupal blocks, or even dynamic feeds built from selecting specific fields from entities. Fields can have criteria and be filtered within the View to select entity instances that match the criteria. Views maintain the ability to harness entity relationships to reference other related entities and has support for view modes tied to entity types that have existing displays defined. The integration between entities and Views represents a nice example of two subsystems working <span class="No-Break">well together.</span></p>
			<p><strong class="bold">User</strong> is <a id="_idIndexMarker293"></a>also a ubiquitous content entity in Drupal. Users are fieldable, allowing Drupal users to build out robust profiles based on structured data. The user entity serves as the underlying data for authentication and authorization as part of the broader user subsystem. This is extended through Drupal’s permission system, which ultimately maps configured roles back to users and performs authorization based on granted permission. Users are integrated in Drupal logs and relate to authors in the Node entity. Users will be covered in much greater depth in the <span class="No-Break">next chapter.</span></p>
			<p>Entities<a id="_idIndexMarker294"></a> are deeply integrated in Drupal and generally work cohesively throughout all aspects of the application. Builders can expect a fairly seamless experience between the systems, with entities serving as one of<a id="_idTextAnchor252"></a> the more <span class="No-Break">foundational capabilities.</span></p>
			<h1 id="_idParaDest-141"><a id="_idTextAnchor253"></a>Multilingual features</h1>
			<p>Drupal has optional modules for enabling <a id="_idIndexMarker295"></a>multilingual capabilities for entities. This effectively extends Drupal’s native language capabilities with specific, related instances of the same entity. As an example, the same node can have diff<a id="_idTextAnchor254"></a>erent versions based on <span class="No-Break">the language.</span></p>
			<h2 id="_idParaDest-142"><a id="_idTextAnchor255"></a>Modules</h2>
			<p>Drupal offers various modules<a id="_idIndexMarker296"></a> that help enable or disable specific capabilities tied to multilingual needs. Site builders should understand the purpose of e<a id="_idTextAnchor256"></a>ach module to get the <span class="No-Break">intended result.</span></p>
			<h3>Language module</h3>
			<p>The language module<a id="_idIndexMarker297"></a> must be enabled and configured to create general support for <a id="_idIndexMarker298"></a>more than one language. The module can be enabled through Drush or the UI. The following screenshot demonstrates high-level language configuration found at <strong class="bold">Administration</strong> | <strong class="bold">Configuration</strong> | <strong class="bold">Regional </strong><span class="No-Break"><strong class="bold">and language</strong></span><span class="No-Break">:</span></p>
			<div>
				<div id="_idContainer048" class="IMG---Figure">
					<img src="image/B19491_08_7.jpg" alt="Figure 8.7 - The language management screen" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.7 - The language management screen</p>
			<p>The preceding screenshot demonstrates how to enable specific languages through the <strong class="bold">Add language</strong> workflow, change the default language for the application, and edit high-level settings for <span class="No-Break">the language.</span></p>
			<p>The screenshot also demonstrates a second tab, <strong class="bold">Detection and selection</strong>, which is shown in the <span class="No-Break">following screenshot:</span></p>
			<div>
				<div id="_idContainer049" class="IMG---Figure">
					<img src="image/B19491_08_8.jpg" alt="Figure 8.8 – The language detection screen" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.8 – The language detection screen</p>
			<p>As the name implies, this configuration controls the logic of how the Drupal application determines which language to return. Specific logic can be enabled or disabled based on the intended behavior of what the application should use to determine language. There is an implied order of resolution, where a series of enabled checks can be performed if one check does not effectively<a id="_idIndexMarker299"></a> resolve an enabled language. <strong class="bold">URL</strong> is common, where the path includes a<a id="_idIndexMarker300"></a> language code, such as <strong class="source-inline">en/about-us</strong> for English and <strong class="source-inline">es/about-us</strong> for Spanish. Other resolvers can check the language of the user’s browser and even default to letting users select which enabled language they want. Each detection mechanism can be configured for specific se<a id="_idTextAnchor257"></a>ttings relevant to its <span class="No-Break">resolution logic.</span></p>
			<h3>Content translation module</h3>
			<p>Content entities <a id="_idIndexMarker301"></a>can have <a id="_idIndexMarker302"></a>multilingual capabilities enabled through the content translation module. After enabling the module, the following screenshot demonstrates how to configure translation settings per entity type found at <strong class="bold">Administration</strong> |<strong class="bold"> Configuration</strong> | <strong class="bold">Regional and language</strong> | <span class="No-Break"><strong class="bold">Content language</strong></span><span class="No-Break">:</span></p>
			<div>
				<div id="_idContainer050" class="IMG---Figure">
					<img src="image/B19491_08_9.jpg" alt="Figure 8.9 – The content entity multilingual configuration screen" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 8.9 – The content entity multilingual configuration screen</p>
			<p>The preceding<a id="_idIndexMarker303"></a> screenshot demonstrates the ability to select which entity<a id="_idIndexMarker304"></a> types should have multilingual capabilities enabled. Each entity type may have the ability to select default languages by bundle if an entity type is translatable. These settings enable fine-grained controls for both entity type and bu<a id="_idTextAnchor258"></a>ndle, given the intent of <span class="No-Break">the application.</span></p>
			<h3>Locale module</h3>
			<p>The locale<a id="_idIndexMarker305"></a> module<a id="_idIndexMarker306"></a> performs interface translation of Drupal’s administrative UI. This is especially helpful for site builders and content administrators who are able to have a UI in their native language. The module performs what is known<a id="_idIndexMarker307"></a> as <strong class="bold">string-based translation</strong>, where specific terms (and plural versions of those terms) are converted from one language <span class="No-Break">to another.</span></p>
			<p>The <a id="_idIndexMarker308"></a>community also offers pre-packaged translations through <a href="https://localize.drupal.org">localize.drupal.org</a>. Contributed by community members, specific translations have been uploaded and refined <a id="_idIndexMarker309"></a>for various languages. Community members submit strings per language and have the ability to contribute new strings they discover are not already translated. This is useful for getting ongoing translation coverage of terminology to build a <a id="_idTextAnchor259"></a>more native administrative experience <span class="No-Break">with time.</span></p>
			<h3>Beyond core</h3>
			<p>Translatable content suggests you need authors capable of generating content across various languages. While manual efforts often afford a higher degree of accuracy, enterprises sometimes harness translation services where the content of one language can be submitted, translated, and sent back to Drupal. Services often have their own contributed projects that extend the core translation capabilities and interface with the service. Various vendors exist with their own strengths, weaknesses, and costs, which can vary application by application. Developers should pick <a id="_idTextAnchor260"></a>what is most relevant to their needs, if <span class="No-Break">at all.</span></p>
			<h1 id="_idParaDest-143"><a id="_idTextAnchor261"></a>Summary</h1>
			<p>Drupal harnesses relational database principles to help structure content through its Entity subsystem. This ubiquitous system impacts content and configuration and integrates with other features such as Views. Effective structured content follows conventions borrowed from databases, such as atomic fields and normalization. Entities are highly extensible through various settings, capabilities tied to fields, and multilingual features. Given the foundational nature of entities, it is extremely important to understand the system and how to leverage it properly <span class="No-Break">throughout Drupal.</span></p>
			<p>The next chapter will explore users, roles, and permissions, which allow for a tailored experience for different <span class="No-Break">administrative purposes.</span></p>
		</div>
	</body>
</html>
