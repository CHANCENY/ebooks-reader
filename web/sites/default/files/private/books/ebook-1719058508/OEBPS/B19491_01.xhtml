<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB" xmlns:epub="http://www.idpf.org/2007/ops">
	<head>
		<title>B19491_01</title>
		<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css" />
	</head>
	<body id="B19491_01">
		<div id="_idContainer010">
			<h1 id="_idParaDest-18" class="chapter-number"><a id="_idTextAnchor017"></a>1</h1>
			<h1 id="_idParaDest-19"><a id="_idTextAnchor018"></a>What is Drupal?</h1>
			<p><a id="_idTextAnchor019"></a>Drupal<a id="_idIndexMarker000"></a> is a<a id="_idIndexMarker001"></a> popular <strong class="bold">content management system</strong> (<strong class="bold">CMS</strong>) for building websites, web applications, and digital experiences. With such flexibility, it can be difficult to define exactly what Drupal is. This chapter explores that question in depth to clarify its identity, purpose, <span class="No-Break">and objective.</span></p>
			<p>The goal of this chapter is to provide a solid foundation that we will build upon in the more practical, hands-on chapters found later in this book. Learning basic concepts and understanding the community are essential for anyone who wants to work <span class="No-Break">with Drupal.</span></p>
			<p>In this chapter, we will explore the <span class="No-Break">following topics:</span></p>
			<ul>
				<li>What is <span class="No-Break">a CMS?</span></li>
				<li>Framework <span class="No-Break">and extensibility</span></li>
				<li><span class="No-Break">Basic concepts</span></li>
				<li>Popular <span class="No-Break">case studies</span></li>
			</ul>
			<h1 id="_idParaDest-20"><a id="_idTextAnchor020"></a>What is a CMS?</h1>
			<p>A <strong class="bold">CMS</strong>, in<a id="_idIndexMarker002"></a> its simplest form, is a tool to create, update, maintain, and present content. This was historically for websites, but now, they’re commonly used for digital experiences given the rise of omnichannel content delivery. The foundations of the web started with servers delivering static HTML files over the internet. Tools that abstracted technical complexities in building HTML, such as Macromedia Dreamweaver, allowed <a id="_idIndexMarker003"></a>non-technical audiences to author websites without knowing how to code. HTML files would be modified on someone’s personal computer and subsequently pushed up to a web server through protocols such as FTP or SFTP. A CMS abstracts both the coding and the file-based operations to enhance the capabilities of a system. Many CMSs also handle content delivery given that managing content has evolved to address more complex use cases with specific access controls, editorial reviews, <span class="No-Break">and more.</span></p>
			<p>The modern CMS has evolved to serve several popular use cases. Many eCommerce websites manage products, pricing, and promotions through a CMS where the system manages shopping carts, users, and payment transactions. Social networks, such as Twitter and Facebook, harness content management capabilities to deliver user-specific, innovative <span class="No-Break">digital experiences.</span></p>
			<p>Enterprise CMS systems must account for much more than just browser-based content delivery, which explains Drupal’s evolution. Omnichannel capabilities often allow a CMS to serve as a central content store while allowing the same content to be served across any channel from a website, app on your phone, a notification stream, and more. A CMS is now viewed as a major enabler for an effective digital strategy spanning simple websites for small businesses to a highly integrated content store for major corporations. Over time, Drupal has added the features and extensibility necessary to be a platform that <span class="No-Break">enterprises adopt.</span></p>
			<p>CMS systems<a id="_idIndexMarker004"></a> began by managing content published on basic websites. Today, applications such as Drupal have evolved to be able to dynamically deliver content through many channels and manage data across a vast amount of enterprise capabilities. Recognizing this evolution helps explain Drupal’s position in the space of CMS solutions as an enabler not just for simple website use cases, but <span class="No-Break">far more.</span></p>
			<h1 id="_idParaDest-21"><a id="_idTextAnchor021"></a>Frameworks and extensibility</h1>
			<p>I once heard Drupal described as<a id="_idIndexMarker005"></a> analogous to Lego building blocks in that Lego blocks of all shapes and sizes; what can be created is limited only by your imagination. Many people have attempted to define what Drupal is. While a clear definition may help people <a id="_idIndexMarker006"></a>understand when and how to adopt Drupal, if Drupal is of interest to them, or if Drupal can help them deliver a specific solution effectively, this is not a constructive way to understand what <span class="No-Break">Drupal is.</span></p>
			<p>Drupal is a tool. What is delivered with the tool can vary drastically. That is why the Lego analogy works. With Lego blocks, you can build a house, a car, a Star Wars figure… practically anything. Lego blocks empower a builder to create what they want to create. Often, people want a clear definition of Drupal. Is it a house, a car, or a Star Wars figure? No – it is a tool that helps you create the digital experiences you want to build. While I understand a desire to define what Drupal can be used for, looking at Drupal in this manner can be <span class="No-Break">significantly limiting.</span></p>
			<p>Drupal grew in popularity as a CMS. Drupal empowered site builders by offering a user interface for configuring structured content and serving that structured content as rendered HTML. Imagine a system that can be used to both create and deliver websites. Drupal offers that. Content is stored persistently by authors and then rendered for site visitors dynamically. Drupal is an application developed in PHP that leverages a database storage backend. Older CMSs simply managed static files, whereas Drupal is a functional system that can be programmed to manage content. Page requests do not correspond to static files; instead, they are dynamically processed by Drupal. The system interprets a URL, parameters, and sessions to deliver a unique, generated result back to the browser at the time the request was made. Some requests get content, others serve the user interface to manage content. Drupal handles all <span class="No-Break">of that.</span></p>
			<p>However, Drupal can do much more than basic content management. Out of the box, the core of Drupal delivers many <a id="_idIndexMarker007"></a>features that allow it to be configured for conventional content <a id="_idIndexMarker008"></a>management. This includes structured content, WYSIWYG, media/static file management, caching, rendering content displays, API-based content delivery, and more. However, Drupal also comes with a highly extensible framework that allows for it to be customized. Given Drupal is open source, community members have contributed their customizations back to the open-source community as projects that can be downloaded and installed on any <span class="No-Break">Drupal application.</span></p>
			<p>The goal of this book is to show how Drupal, its out-of-the-box features, and contributed projects can be built and configured to deliver amazing digital experiences. Like a large box of Lego blocks, the aim of this book is not to define exactly what can be built but to show you how to use the tool to accomplish a large number of potential outcomes. What you do is only bound by <span class="No-Break">your imagination.</span></p>
			<h1 id="_idParaDest-22"><a id="_idTextAnchor022"></a>Basic Drupal concepts</h1>
			<p>Drupal’s core delivers two fundamental parts of the application: a frontend web application and a backend administrative system. Both are delivered through the Drupal application, which can be accessed from a web browser differentiated based on the request. Common backend paths, such as the user login page “user” and administrative console “admin,” help Drupal <span class="No-Break">differentiate re<a id="_idTextAnchor023"></a>quests.</span></p>
			<h2 id="_idParaDest-23"><a id="_idTextAnchor024"></a>Drupal’s administrative backend</h2>
			<p>Conceptually, Drupal’s backend performs<a id="_idIndexMarker009"></a> tasks and retrieves information about the Drupal system. Tasks change based on the access granted to the user. However, common tasks include performing content updates, configuring Drupal system settings, and managing modules. Useful information, such as Drupal’s system status page, access to Drupal logs, and help pages, can also be accessed from Drupal’s backend. It is useful for content editors and those managing the <span class="No-Break">Drupal system.</span></p>
			<p>The following figure demonstrates Drupal’s administrative backend, which can be found at <strong class="source-inline">/admin</strong> after <span class="No-Break">logging in:</span></p>
			<div>
				<div id="_idContainer008" class="IMG---Figure">
					<img src="image/B19491_01_1.jpg" alt="Figure 1.1 – Drupal’s administrative home page" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 1.1 – Drupal’s administrative home page</p>
			<p>At the top, Drupal has an <a id="_idIndexMarker010"></a>administrative menu that helps navigate the entirety of Drupal’s administrative backend. This figure demonstrates the initial, primary administrative page that lists links within Drupal’s backend. Each category has a gray background that represents a core feature or subsystem. Under each category are links to pages that perform administrative actions or configure the behavior of <span class="No-Break">that s<a id="_idTextAnchor025"></a>ubsystem.</span></p>
			<h2 id="_idParaDest-24"><a id="_idTextAnchor026"></a>Drupal’s frontend presentation layer</h2>
			<p>Since the backend configures<a id="_idIndexMarker011"></a> Drupal and manages content, the frontend is responsible for serving content. Drupal’s render subsystem is used to correlate a page request to the corresponding response, which is dynamically returned by Drupal. While there is far more complexity, a high-level request flow interprets the path, gathers the relevant structured content from Drupal’s backend, maps the content to HTML templates found in the enabled Drupal theme, and returns <span class="No-Break">rendered markup.</span></p>
			<p>The following figure shows Drupal 10’s default home page rendered by the frontend <span class="No-Break">presentation layer:</span></p>
			<div>
				<div id="_idContainer009" class="IMG---Figure">
					<img src="image/B19491_01_2.jpg" alt="Figure 1.2 – Drupal’s default home page" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 1.2 – Drupal’s default home page</p>
			<p>While this shows simple, basic placeholder content, it differs drastically from <span class="No-Break"><em class="italic">Figure 1</em></span><em class="italic">.1</em>, given that it is presenting content and not <span class="No-Break">configuring Drupal.</span></p>
			<p>Consider authenticated users while using Drupal’s frontend and backend. Drupal can deliver content, but not just for anonymous visitors who visit a Drupal website. During frontend processing, Drupal can render content specific for the user who’s being authenticated. Such a capability allows you to leverage Drupal features to build dashboards with individualized content, create personalized experiences, and even deliver content moderation workflows that pair with Drupal’s frontend. The most common use case for authenticated users is still accessing and using the administrative backend of Drupal, but a user can be configured without permission to access the backend. Given users have <a id="_idIndexMarker012"></a>an expanded role in Drupal, a user can log into Drupal with no backend access and get content that’s specific and relevant to them. Imagine building a social network where every user only sees content they subscribe to. Drupal can <span class="No-Break">do that.</span></p>
			<h1 id="_idParaDest-25"><a id="_idTextAnchor027"></a>Popular Drupal case studies</h1>
			<p>Drupal case studies <a id="_idIndexMarker013"></a>start with their fundamental content management features, which build off of structured data. Drupal has been commonly used for blogs, websites, or news. Stanford University offers a web content management program that delivers Drupal and various content management features as a service through their IT department. The State of Georgia offers a similar web platform built with Drupal. Other popular Drupal websites include London.gov.uk, home.cern, unicef.org, the Syfy network, the State of Massachusetts, The Weather Channel, Tesla, Entertainment Weekly, NCAA, the Emmy Awards, <span class="No-Break">and NASA.</span></p>
			<p>Distributions in Drupal often represent popular use cases for Drupal, reducing the time and cost of creating multiple sites that have similar requirements. Websites built with the Open Social distribution (getopensocial.com) help create community-based websites with groups, events, private messaging, and enhanced user profiles. Case studies include Local Gov Drupal (drupal.org/project/localgov), The United Nations, The Salvation Army, and The European Commission. Drupal Commerce is a distribution tailored for eCommerce websites, with a series of optional features for payment gateway integrations, promotions/coupons, analytics, shipping, and fulfillment. Case studies include EuroCentres, Open Sesame, <span class="No-Break">and Artellite.</span></p>
			<p>Drupal has <a id="_idIndexMarker014"></a>countless published case studies and even more undocumented installations that highlight its wide adoption. These case studies demonstrate Drupal’s ability to be used in different industries and verticals, as well as for <span class="No-Break">different implementations.</span></p>
			<h1 id="_idParaDest-26"><a id="_idTextAnchor028"></a>Summary</h1>
			<p>This chapter covered introductory concepts regarding CMSs and highlighted how Drupal built a CMS through its high-level features. First, we introduced Drupal’s framework and extensibility value proposition, which enables both its vibrant community and enterprise-level customizations. Next, we reviewed Drupal.org, which introduced you to how to engage with the community, work with community projects, and the purpose of the Drupal Association. Finally, we looked at some case studies that demonstrate Drupal’s capabilities. The next chapter dives deeper into projects by reviewing core, contributed, and <span class="No-Break">custom projects.</span></p>
		</div>
	</body>
</html>
