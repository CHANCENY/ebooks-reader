<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB" xmlns:epub="http://www.idpf.org/2007/ops">
	<head>
		<title>B19491_05</title>
		<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css" />
	</head>
	<body id="B19491_05">
		<div id="_idContainer026">
			<h1 id="_idParaDest-65" class="chapter-number"><a id="_idTextAnchor102"></a>5</h1>
			<h1 id="_idParaDest-66"><a id="_idTextAnchor103"></a>What’s New in Drupal 10</h1>
			<p><a id="_idTextAnchor104"></a>Drupal 10<a id="_idIndexMarker135"></a> is the latest release in the long-time open source project. Drupal 10 launched with a series of improvements, features, and modernization. And, Drupal 11<a id="_idIndexMarker136"></a> is built in Drupal 10. Deprecations will be proposed, but not removed until Drupal 11 is launched. Features desired for Drupal 11 will be built during Drupal 10’s life cycle. This chapter covers everything about Drupal 10, from its platform requirements to its features to its <span class="No-Break">maintenance considerations.</span></p>
			<p>In this chapter, we’re going to cover the following <span class="No-Break">main topics:</span></p>
			<ul>
				<li><span class="No-Break">Release methodology</span></li>
				<li>New to <span class="No-Break">Drupal 10</span></li>
				<li>Built in <span class="No-Break">Drupal 1<a id="_idTextAnchor105"></a><a id="_idTextAnchor106"></a>0</span></li>
			</ul>
			<h1 id="_idParaDest-67"><a id="_idTextAnchor107"></a>Release methodology</h1>
			<p>Drupal 10’s initiatives and <a id="_idIndexMarker137"></a>requirements were defined before Drupal 10 was launched. This was based on <span class="No-Break">several factors.</span></p>
			<p>Drupal 10 has a defined life cycle with roughly 6 months of minor releases. There is no explicit number of minor releases before a major release is announced. However, major releases, starting with Drupal 8, have been on an approximate 2-to-3-year cadence. After this cadence, a new major version is released and the previous major version reaches its end of life. The only exception is Drupal 7, which has extended end-of-life support. Details can be found on drupal.org by searching for <em class="italic">Core </em><span class="No-Break"><em class="italic">Release Cycles</em></span><span class="No-Break">.</span></p>
			<p>Drupal applications inherit life cycle considerations of Drupal’s dependencies. Infrastructure, such as PHP and MySQL, have explicit supported versions at the time a major version is supported. As an example, Drupal would not explicitly support an end-of-life version of PHP. Application-level dependencies, such as Symfony components or JavaScript libraries, often help define the specific PHP versions or set browser compatibility. Dependencies drive a lot of the logic around major releases. Drupal’s major release cadence often overlaps with major releases of Symfony. And, major releases are remediated and tested against the supported requirements only. The supportability of other requirements may vary but should not <span class="No-Break">be assumed<a id="_idTextAnchor108"></a>.</span></p>
			<h2 id="_idParaDest-68"><a id="_idTextAnchor109"></a>Platform requirements</h2>
			<p>Drupal 10’s platform requirements<a id="_idIndexMarker138"></a> were defined roughly 6 months before its release. Drupal 10 requires at least PHP 8.1 and an explicit set of PHP extensions defined on drupal.org. MySQL requires at least 5.7.8 and MariaDB at least 10.3.7. Support for PostgreSQL 12 and SQLite 3.26 exists but with specific <span class="No-Break">extensions enable<a id="_idTextAnchor110"></a>d.</span></p>
			<h2 id="_idParaDest-69"><a id="_idTextAnchor111"></a>Upgrade considerations</h2>
			<p>As mentioned previously, Drupal applications are “free like a puppy.” Major release upgrades are no different. While the code is open, it takes work to maintain. The infrastructure must be updated first, which helps split a major upgrade into a logical sequence of events. Like<a id="_idIndexMarker139"></a> previous versions, Drupal 10 was built in Drupal 9. When preparing for Drupal 9, it is best to upgrade the platform and infrastructure with the last minor version of Drupal 9. All of the platform-level support is already in the last Drupal 9 release and ready for the upcoming Drupal 10 deprecations. Deprecation scanning can be used to remediate code-level issues, after which the application code can be upgraded to Drupal 10. Each part of the infrastructure has an upgrade process. It is best practice to harness environments where a development environment can be updated safely for testing and remediation before a <span class="No-Break">production rele<a id="_idTextAnchor112"></a>ase.</span></p>
			<h2 id="_idParaDest-70"><a id="_idTextAnchor113"></a>Major releases</h2>
			<p>Major releases<a id="_idIndexMarker140"></a> demand more maintenance effort than minor releases, but a careful and methodical approach to upgrading both the platform and the code helps ensure a smooth and thoughtful execution. Note the relevance of semantic versioning (semver.org) for the conceptual differences between major and minor releases. Note that Drupal’s life cycle can help with planning for when to release both major and minor versions. New features and changes to Drupal’s underlying APIs are built into earlier minor releases before being officially released as a new major release. It is only in the new major release that changes get fully implemented and new features <span class="No-Break">are supported.</span></p>
			<p>Understanding how Drupal defines releases is critical to the infrastructure required to run Drupal, how Drupal manages dependencies, and the nuances of upgrading from earlier releases. Next, we will cover the new features and capabilities of <span class="No-Break">Drupa<a id="_idTextAnchor114"></a>l 10.</span></p>
			<h1 id="_idParaDest-71"><a id="_idTextAnchor115"></a>New to Drupal 10</h1>
			<p>Many new features and updates to <a id="_idIndexMarker141"></a>Drupal were delivered when Drupal <span class="No-Break">10 lau<a id="_idTextAnchor116"></a>nched.</span></p>
			<h2 id="_idParaDest-72"><a id="_idTextAnchor117"></a>Symfony 6.2</h2>
			<p>While this is not necessarily a<a id="_idIndexMarker142"></a> user-facing feature, Drupal 10 upgraded the underlying Symfony components to version 6.2. This version is the current, stable release of <a id="_idIndexMarker143"></a>Symfony at the time of Drupal 10’s launch. Drupal core leverages Symfony as a framework for underlying capabilities such as routing, services, dependency injection, events, kernels, and processes. Drupal also adopts utilities for serialization, validators, YAML, and translation. This helps Drupal leverage a well-adopted framework instead of creating its own code to achieve the same outcomes as exemplified by other PHP projects, such as Laravel and Joomla. Symfony components also helped define the platform requirements of Drupal, given Symfony 6.2 required at least PHP 8.1 and must maintain parity with the <span class="No-Break">Drupal application.</span></p>
			<p>Upgrading Symfony incorporates improvements such as bug fixing and stability, all of which were brought in from the Symfony community. Given that Drupal 9 was pinned to Symfony 4.4 components, this was a significant upgrade and, subsequently, a lot of updates. Symfony 5 released new components, performance improvements, and a significant reduction in the code base. Symfony 6 incorporated newer PHP development patterns, various improvements, and <span class="No-Break">improved de<a id="_idTextAnchor118"></a>b<a id="_idTextAnchor119"></a>ugging.</span></p>
			<h2 id="_idParaDest-73"><a id="_idTextAnchor120"></a>CKEditor 5</h2>
			<p>CKEditor was upgraded<a id="_idIndexMarker144"></a> to version 5 in Drupal 10. CKEditor was already the de facto WYSIWYG <a id="_idIndexMarker145"></a>adopted by Drupal for long text, free-form field widgets. However, CKEditor5 delivered significant user experience improvements, modernized JavaScript for smoother integrations with frameworks such as ReactJS and VueJS, provided a large library of useful plugins, <span class="No-Break">and more.</span></p>
			<p>CKEditor’s <a id="_idIndexMarker146"></a>release was a significant architectural change from previous releases. The Drupal community members needed to work closely with contributors of CKEditor to overhaul Drupal’s CKEditor integration. This spanned Drupal core’s native WYSIWYG feature to plugins for things such as Drupal’s media integration. Contributed plugins needed to be rebuilt for <a id="_idIndexMarker147"></a>CKEditor 5. Drupal also had to replace its backend <a id="_idIndexMarker148"></a>processing and serialization to properly support the new CKEditor 5 data format. This was no trivial effort but helped Drupal deliver a modernized, <span class="No-Break">feature-r<a id="_idTextAnchor121"></a>ich WYSIWYG.</span></p>
			<h2 id="_idParaDest-74"><a id="_idTextAnchor122"></a>Olivero</h2>
			<p>Drupal replaced its <a id="_idIndexMarker149"></a>long-time default theme, Bartik, with a new and improved theme, Olivero. Olivero, named<a id="_idIndexMarker150"></a> after the late Rachel Olivero, was a blind Drupal community member and champion for inclusivity. Rachel’s influence helped steer Drupal to become an open source leader in web accessibility and community <span class="No-Break">member inclusion.</span></p>
			<p>The new Olivero theme is a fitting tribute to Rachel’s legacy. Olivero is more than just a refreshed, modernized look and feel. It delivers on WCAG AA compliance, a stringent web accessibility standard that demonstrates Drupal’s commitment to building a platform for all. Olivero also delivers revamped support for some of the newer Drupal features, such as media, a layout builder, <span class="No-Break">and more.</span></p>
			<p>The following figure shows Drupal’s home page with the <span class="No-Break">Olivero theme:</span></p>
			<div>
				<div id="_idContainer024" class="IMG---Figure">
					<img src="image/B19491_05_1.jpg" alt="Figure 5.1 - Drupal’s out-of-the-box front pag﻿e with Olivero" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 5.1 - Drupal’s out-of-the-box front pag<a id="_idTextAnchor123"></a>e with Olivero</p>
			<p>This figure<a id="_idIndexMarker151"></a> demonstrates<a id="_idIndexMarker152"></a> the fresh new look and feel of <a id="_idIndexMarker153"></a>Drupal 10’s new default theme. The previous theme, Bartik, was the default through the Drupal 7, 8, and 9 major releases, which spanned over 12 years from Drup<a id="_idTextAnchor124"></a>al <span class="No-Break">10’s release.</span></p>
			<h2 id="_idParaDest-75"><a id="_idTextAnchor125"></a>Claro</h2>
			<p>Seven, Drupal’s longtime<a id="_idIndexMarker154"></a> default administrative theme, was replaced by Claro. Claro brings a fresh look and<a id="_idIndexMarker155"></a> feel to Drupal’s backend administration. Like Olivero, it delivers improvements for web accessibility standards. Claro also incorporates modern JavaScript techniques and improved <span class="No-Break">administrative usability.</span></p>
			<p>The following<a id="_idIndexMarker156"></a> figure shows a screenshot <span class="No-Break">of Claro:</span></p>
			<div>
				<div id="_idContainer025" class="IMG---Figure">
					<img src="image/B19491_05_2.jpg" alt="Figure 5.2 - Drupal’s out-of-the-box node authoring page in Claro" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 5.2 - Drupal’s out-of-the-box node authoring page in Claro</p>
			<p>As we can see, the delivery of<a id="_idIndexMarker157"></a> Claro helped ensure that Drupal’s administrative experience was modernized <a id="_idIndexMarker158"></a>and delivered o<a id="_idTextAnchor126"></a>n <span class="No-Break">updated standards.</span></p>
			<h2 id="_idParaDest-76"><a id="_idTextAnchor127"></a>Starter kit themes</h2>
			<p>Natively, Drupal has a feature for<a id="_idIndexMarker159"></a> base themes, where a theme can inherit templates and styles from<a id="_idIndexMarker160"></a> another theme to override them. Drupal 10 launched with a similar concept to create a new feature called starter kit themes. This feature annotates specific themes as starter kits and <a id="_idIndexMarker161"></a>works with a command-line utility that generates themes from these starter kits. Drupal 10 core has one starter kit theme and the command-line utility. Generated themes do not maintain the inheritance of the original starter kit. This lack of inheritance allows for a generated theme to be fully customized while changes can still be tracked through Git. Developers can create their own starter kits to have a consistent starting point. This is useful for agencies or teams that may incorporate consistent, opinionated frontend development practices into a theme but wish to generate themes independently <span class="No-Break">for websites.</span></p>
			<p>These new features of Drupal 10 not only use the latest and greatest of Drupal’s dependencies, but they deliver net new value from previous versions of Drupal to enable new use cases and empower developers. This may not be exhaustive of what gets delivered in Drupal 10, however, as many features will be worked on and may be delivered during<a id="_idTextAnchor128"></a> Drupal 10’s <span class="No-Break">life cycle.</span></p>
			<h1 id="_idParaDest-77"><a id="_idTextAnchor129"></a>Built in Drupal 10</h1>
			<p>Dries, the founder of Drupal, announced strategic<a id="_idIndexMarker162"></a> initiatives that are actively being built in Drupal 10. It is<a id="_idIndexMarker163"></a> common for strategic initiatives to deliver in the next major version of Drupal, but occasionally, these efforts will get merged into minor releases of the current major version. As such, the following strategic initiatives will be created in Drupal 10 and may be delivered in a minor version of Drupal 10 should they finish. And, adopters of Drupal 10 can try out work-in-progress initiativ<a id="_idTextAnchor130"></a>es and contribute <span class="No-Break">to them.</span></p>
			<h2 id="_idParaDest-78"><a id="_idTextAnchor131"></a>Automatic updates</h2>
			<p>As this book mentions <a id="_idIndexMarker164"></a>multiple times, Drupal requires ongoing maintenance. Complex<a id="_idIndexMarker165"></a> Drupal sites with a large number of installed projects may have updates routinely as new releases span both Drupal core and its projects. Security updates are especially important to prevent a Drupal application from being compromised. Performing updates today is a largely technical task that requires knowledge of Composer, Git, and more. This can require a large investment and knowledge of technical skills. Tools such as Wordpress offer native features to perform automatic code updates that help non-developers adopt WordPress. This effort aims to automatically install updates in Drupal without the need to do any development work. Drupal checks for updates to its application and securely loads updates, all while providing the ability to roll back. Features like this allow Drupal to become more competitive outside of enterprise environments as small businesses are less likely to pay devel<a id="_idTextAnchor132"></a>opers to maintain <span class="No-Break">a website.</span></p>
			<h2 id="_idParaDest-79"><a id="_idTextAnchor133"></a>Recipes</h2>
			<p>One common pain point in Drupal is its<a id="_idIndexMarker166"></a> distribution feature. Distributions are<a id="_idIndexMarker167"></a> installable<a id="_idIndexMarker168"></a> packages of projects and configurations that allow for a new Drupal installation to be set up in a specific way from the start. However, distributions do not allow for more fine-grained updates. The distribution must be updated all at once and maintainers must provide updates to the distribution before an application can perform the update. This is a heavy burden for maintainers of distributions who subsequently need to update their distribution every time a project updates, including Drupal core. Applications need to wait, which is not ideal when security updates are announced. A new feature called Recipes aims to offer <span class="No-Break">an alternative.</span></p>
			<p>Recipes <a id="_idIndexMarker169"></a>allow you to perform<a id="_idIndexMarker170"></a> a one-time configuration of a Drupal application. Recipes are declarative, not functional. Each recipe defines what to set up. Drupal offers a command-line tool to load this recipe. Recipes can come in a bundle, allowing for one recipe to package multiple recipes. And, Drupal will be augmenting its installation process to allow for one or more recipes to be loaded. In contrast to distributions, recipes have no persistence in Drupal after setup and they can be loaded at any point in the application’s life cycle. Recipes have already been created for Drupal’s standard installation profile. While it is undecided, recipes may ev<a id="_idTextAnchor134"></a>entually <span class="No-Break">deprecate distributions.</span></p>
			<h2 id="_idParaDest-80"><a id="_idTextAnchor135"></a>Decoupled menus</h2>
			<p>Drupal natively offers features for<a id="_idIndexMarker171"></a> web services through its JSON API<a id="_idIndexMarker172"></a> capabilities. Also, Drupal is an appealing structured content backend for modern JavaScript frameworks such as ReactJS and VueJS. Decoupled menus is an initiative aimed at providing a reference architecture for Drupal menus. It provides a JSON-based web service that exposes menu-related data and a JavaScript-based library to parse the web service. Future efforts will move beyond just menus into other entities such as n<a id="_idTextAnchor136"></a>odes, taxonomies, and <span class="No-Break">even customs.</span></p>
			<h2 id="_idParaDest-81"><a id="_idTextAnchor137"></a>Project browser</h2>
			<p>It can be difficult to understand <a id="_idIndexMarker173"></a>Drupal’s terminology, especially when evaluating projects. The project browser<a id="_idIndexMarker174"></a> initiative aims to help showcase some of Drupal’s most adopted projects with easy-to-understand language and a user interface to readily browse and install projects. This effort helps non-technical evaluators more readily discover, access, and install prominent contributed features. The project browser will be a step during installation and a standalone catalog. It will handle downloading the code without leveraging Composer. And, future efforts will in<a id="_idTextAnchor138"></a>tegrate recipes beyond <span class="No-Break">just projects.</span></p>
			<h1 id="_idParaDest-82"><a id="_idTextAnchor139"></a>Summary</h1>
			<p>Drupal has established a methodical release process for both major and minor releases and a definition of platform requirements. Major and minor releases differ in expectations for performing updates. Drupal 10 delivered the latest major release of Drupal with notable features, improvements, and updates. It shipped with new default themes, a CKEditor upgrade, and updates for underlying Symfony components. New strategic initiatives are expected to deliver even more features during Drupal 10’s <span class="No-Break">life cycle.</span></p>
			<p>The next chapter will teach you how to load a new Drupal application, perform an installation, and review common upfront configuration <span class="No-Break">use cases.</span></p>
		</div>
	</body>
</html>
