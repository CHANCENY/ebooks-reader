<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB" xmlns:epub="http://www.idpf.org/2007/ops">
	<head>
		<title>B19491_11</title>
		<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css" />
	</head>
	<body id="B19491_11">
		<div id="_idContainer079">
			<h1 id="_idParaDest-176" class="chapter-number"><a id="_idTextAnchor324"></a>11</h1>
			<h1 id="_idParaDest-177"><a id="_idTextAnchor325"></a>Files, Images, and Media</h1>
			<p><a id="_idTextAnchor326"></a>Drupal’s <strong class="bold">File</strong> and <strong class="bold">Media</strong> systems provide a rich set of features that are commonly used for static assets, such as images, videos, and more.  This chapter extends structured content concepts to files and media types and leverages these features as fields linked to other entities. Each feature has various ways to configure both media and files. This chapter covers additional use cases, including Drupal’s public and private filesystems for different storage mechanisms. Finally, this chapter concludes with various tutorials that address common <span class="No-Break">asset-based implementations.</span></p>
			<p>In this chapter, we’re going to cover the following <span class="No-Break">main topics:</span></p>
			<ul>
				<li>Assets <span class="No-Break">in Drupal</span></li>
				<li><span class="No-Break">Files</span></li>
				<li><span class="No-Break">Images</span></li>
				<li><span class="No-Break">Media</span></li>
				<li><span class="No-Break">Use cases</span></li>
			</ul>
			<h1 id="_idParaDest-178"><a id="_idTextAnchor327"></a>Assets in Drupal</h1>
			<p>Assets<a id="_idIndexMarker381"></a> are a specific type of digital content. Consider reading about a researcher online. When viewing their biography on a University website, an image shows a picture of them, a list of their publications, which are linked to PDF files, and a video of their latest conference talk is featured. These are <span class="No-Break">all assets.</span></p>
			<p>Assets are a vibrant part of the modern web. Social platforms such as Instagram and YouTube are built around images and videos. The emergence of cameras and cell phones has made digital assets ubiquitous. As such, assets are a large part of digital applications. And, assets are a significant part <span class="No-Break">of Drupal.</span><a id="_idTextAnchor328"></a></p>
			<h2 id="_idParaDest-179"><a id="_idTextAnchor329"></a>Use cases</h2>
			<p>Assets are one part of the<a id="_idIndexMarker382"></a> longstanding “trifecta” of Drupal: code, database, and files. Files take on two forms: assets and generated files. Configuration, as an example, is generated by the Drupal application, managed by the runtime database, and persistently stored in files for versioning. Drupal’s caching also commonly generates files for CSS and JS. Assets are for <span class="No-Break">file-based content.</span></p>
			<p>Drupal has a significant amount of functionality for assets. It can be configured to address use cases similar to that of<a id="_idIndexMarker383"></a> a <strong class="bold">digital asset manager</strong> (<strong class="bold">DAM</strong>), while Drupal has many basic, native features of a DAM out of the box. Given Drupal is a digital application with structured content, it should be no surprise that Drupal can manage assets much like other content. Assets have the same problems as other content: managing, storing, rendering, transforming, and authoring. Drupal’s asset features cover all of these problems across several <span class="No-Break">use cases.</span></p>
			<p>As an application, everything starts with Drupal managing assets. Drupal can natively manage assets and metadata for assets in tandem with its structured content. It has features that automatically manage metadata, such as the user who uploaded the asset, the file size, the extension, and tracking any derivative files. Drupal can manage the relationship of a file to other content <span class="No-Break">it manages.</span></p>
			<p>Drupal can also handle the storage of assets through both a public and private filesystem. An author uploads a file and Drupal can store it natively. The most common, default storage means is the public filesystem, which creates a public URL to the file managed by Drupal. When authoring happens and the file is uploaded, Drupal handles all of the logic to store the file, which includes name collisions and references to the authored content (when relevant). Drupal can also manage private files, which have gated access based on the context of a request and Drupal’s access control mechanisms. For example, if a file is uploaded to a node and that node can only be viewed with certain permissions, the file would be subjected to the same access control. Access to the file would have parity with access to the node and not offer a <span class="No-Break">public-facing URL.</span></p>
			<p class="callout-heading">Important note</p>
			<p class="callout">Public filesystems allow for direct links to assets. Even if you remove all references to the asset from other content, such as nodes, the file still exists and would be accessible by accessing the URL to <span class="No-Break">the file.</span></p>
			<p>Drupal has various tools that allow it to manage and deliver assets that can address common use cases. Its systems handle the management, storage, and functionality <span class="No-Break">of asset<a id="_idTextAnchor330"></a>s.</span></p>
			<h1 id="_idParaDest-180"><a id="_idTextAnchor331"></a>Files</h1>
			<p>The foundational asset<a id="_idIndexMarker384"></a> management feature in Drupal is called <strong class="bold">File</strong>. This feature handles fundamental file management for <span class="No-Break">Drupal’s asse<a id="_idTextAnchor332"></a>ts.</span></p>
			<h2 id="_idParaDest-181"><a id="_idTextAnchor333"></a>Subsystem</h2>
			<p><strong class="bold">File</strong> has an entire subsystem<a id="_idIndexMarker385"></a> in Drupal. Like several other systems, it starts with a <strong class="bold">File</strong> entity. This entity provides all of the standard CRUD operations for files. This entity maintains all of the file storage and the corresponding metadata for a file. Supporting the entity are all of the functions that help derive file size and file extensions, and also perform file uploads during content authoring. At a high level, the file subsystem performs basic asset storage, retrieval, and <span class="No-Break">management capabilities.</span></p>
			<p>Entities leverage files through the use of a file field. Suppose that the content of a particular content type should have an attached file. A file field can be added to the structured content of the content type, which then allows you to upload a file and associate it with the node. Files uploaded to the public filesystem will have URLs that can be directly linked in content such <span class="No-Break">as </span><span class="No-Break"><a id="_idIndexMarker386"></a></span><span class="No-Break">WYSIWYG.</span></p>
			<p>The subsystem also has a robust framework that allows other modules to extend this file-related functionality. This can help with triggering specific business processes, adding conditional custom validation of a file, or performing transformations on <span class="No-Break">the f<a id="_idTextAnchor334"></a>ile.</span></p>
			<h2 id="_idParaDest-182"><a id="_idTextAnchor335"></a>Modules and configuration</h2>
			<p>To enable Drupal’s file <a id="_idIndexMarker387"></a>functionality, simply enable the <strong class="bold">File</strong> module under <strong class="bold">Field Types</strong> at <strong class="source-inline">admin/modules</strong>. A central, administrative file listing can now be found at <strong class="source-inline">admin/content/files</strong>. The following figure shows the rudimentary <span class="No-Break">file listing:</span></p>
			<div>
				<div id="_idContainer067" class="IMG---Figure">
					<img src="image/B19491_11_1.jpg" alt="Figure 11.1 – File management screen in Drupal" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.1 – File management screen in Drupal</p>
			<p>Content<a id="_idIndexMarker388"></a> management for files happens with fields of entities. After the module is enabled, any fieldable entity can add a file field that allows each field to be configured for each instance (for example, allowed file sizes and extensions, the use of public or private files, and more). The following figure demonstrates adding an “attachment” file field to a <span class="No-Break">content type:</span></p>
			<div>
				<div id="_idContainer068" class="IMG---Figure">
					<img src="image/B19491_11_2.jpg" alt="Figure 11.2 – Step 1 of configuring a file field" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.2 – Step 1 of configuring a file field</p>
			<p>This step configures the specific file field settings, including picking public or private file management. It also allows for cardinality selection, which allows one or more files to be uploaded. The following figure shows the next step, which involves managing general <span class="No-Break">field metadata:</span></p>
			<div>
				<div id="_idContainer069" class="IMG---Figure">
					<img src="image/B19491_11_3.jpg" alt="Figure 11.3 – Step 2 of configuring a file field" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.3 – Step 2 of configuring a file field</p>
			<p>Through <a id="_idIndexMarker389"></a>configuration, each file field has standard field configuration, such as name and cardinality, combined with file-specific functionality, such as extensions, size, filesystem, <span class="No-Break">and more.</span></p>
			<p>When creating a node, a new attachment file field will exist. The following figure shows the <span class="No-Break">field widget:</span></p>
			<div>
				<div id="_idContainer070" class="IMG---Figure">
					<img src="image/B19491_11_4.jpg" alt="Figure 11.4 – The authoring experience for a configured file field" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.4 – The authoring experience for a configured file field</p>
			<p>You can configure system-wide file behavior at <strong class="source-inline">admin/config/media/file-system</strong>. This is where the public and private filesystems can be configured. The following figure shows the <span class="No-Break">file-related configuration:</span></p>
			<div>
				<div id="_idContainer071" class="IMG---Figure">
					<img src="image/B19491_11_5.jpg" alt="Figure 11.5 – System-wide file configuration" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.5 – System-wide file configuration</p>
			<p>Files provide <a id="_idIndexMarker390"></a>foundational capabilities for managing assets in Drupal through its existing structured content and <span class="No-Break">configuration capabilit<a id="_idTextAnchor336"></a>ies.</span></p>
			<h1 id="_idParaDest-183"><a id="_idTextAnchor337"></a>Images</h1>
			<p>Images represent <a id="_idIndexMarker391"></a>a specific type of file and more specific functionality. Images build those specific features by leveraging files for all of the foundational asset-related functionality, such as <a id="_idIndexMarker392"></a>CRUD. It also adds image-specific metadata, such as fields for alternate text, which is helpful for accessibility. Drupal may have content that links to a PDF or Word document that was created outside of Drupal. However, web browsers have native support for images of various formats. Given that Drupal serves content for the web, it offers more advanced image-related features beyond simple file linking, which is useful for rendering images and transforming images as part of its content <span class="No-Break">management capabilities.</span></p>
			<p>The responsive web adds more demands on content management systems to ensure images are appropriately delivered to different devices. Some images can be rather large in file size. Imagine the earlier days of cellular networks trying to download a large image on a web page. Content management systems started building features to be more responsive to address this need. Drupal provides image processing functions in the form of image styles that take the same source image and create any number of transformed copies. This is important for harnessing copies of the same image across different devices or types of displays. Each copy can be configured to set a desired size and more. Combined with other features in Drupal, a specific image style can be served to the size of <span class="No-Break">the display.</span></p>
			<p>Like files, images <a id="_idIndexMarker393"></a>are primarily managed through the structured content of other entities using image fields. Image fields allow for the desired configuration of an image, such as allowed extensions, desired sizes, and association with <span class="No-Break">image <a id="_idTextAnchor338"></a>styles.</span></p>
			<h2 id="_idParaDest-184"><a id="_idTextAnchor339"></a>Modules and configuration</h2>
			<p>The <strong class="bold">Image</strong> module, like the <strong class="bold">File</strong> module, is grouped under <strong class="bold">Field Types</strong> with a dependency of the <strong class="bold">File</strong> module to<a id="_idIndexMarker394"></a> harness its functionality at <strong class="source-inline">admin/modules</strong>. Any images added to Drupal will be listed under the central file listing, as shown in <span class="No-Break"><em class="italic">Figure 11</em></span><em class="italic">.1</em>. After enabling the <strong class="bold">Image</strong> module, like the <strong class="bold">File</strong> module, Drupal now offers a reference-based field type that can be added to any fieldable entity type, similar to what is shown in <span class="No-Break"><em class="italic">Figure 11</em></span><em class="italic">.2</em>. The authoring experience for images resembles what’s shown in <span class="No-Break"><em class="italic">Figure 11</em></span><em class="italic">.3</em> but with some slight variation in how images are displayed after the image is uploaded. Finally, Drupal allows some centralized configuration of image tooling at <strong class="source-inline">admin/config/media/image-toolkit</strong>, which is more commonly used for advanced <span class="No-Break">use cases.</span></p>
			<p class="callout-heading">Important note</p>
			<p class="callout">Image processing tooling is largely dependent on the underlying platform. Most platforms have a PHP library known as <a id="_idIndexMarker395"></a>GD2, which is required by Drupal. Image manipulation can be a resource-intensive operation and difficult to manage from the <span class="No-Break">underlying platform.</span></p>
			<p>Image style functionality is also available after the <strong class="bold">Image</strong> module has been enabled and can be configured from <strong class="source-inline">admin/config/media/image-styles</strong>. This functionality is a generic configuration of sizes for any image and is not specific to one image. The following figure shows the image style configuration listing to help you understand <span class="No-Break">this functionality:</span></p>
			<div>
				<div id="_idContainer072" class="IMG---Figure">
					<img src="image/B19491_11_6.jpg" alt="Figure 11.6 – Listing of image styles" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.6 – Listing of image styles</p>
			<p><span class="No-Break"><em class="italic">Figure 11</em></span><em class="italic">.6</em> shows the general categorization of sizes for images, as exemplified by <strong class="bold">Thumbnail</strong>, <strong class="bold">Medium</strong>, and <strong class="bold">Large</strong>. These categories demonstrate fixed sizing. <strong class="bold">Wide</strong> represents an image that only has a width; the height of the image would remain both relative and variable. All of this can be configured based on the desired functionality in the Drupal application, including the use of the <span class="No-Break">original image.</span></p>
			<p>Images<a id="_idIndexMarker396"></a> require Drupal to be aware of different displays to be able to effectively harness image styles. Drupal has a dependent module called <strong class="bold">Breakpoints</strong> to help <a id="_idIndexMarker397"></a>Drupal recognize the size of the display. There is no user interface for breakpoints as it is most common to find breakpoints associated with Drupal themes, which need to provide responsive styling through CSS and media queries. A theme can configure the breakpoints from a specified YAML file with the <strong class="source-inline">[theme].breakpoints.yml</strong> naming convention. This is exemplified in the following code sample with a fake theme <span class="No-Break">named </span><span class="No-Break"><strong class="source-inline">mydesign</strong></span><span class="No-Break">:</span></p>
			<pre class="source-code">
mydesign.mobile:
&#160;&#160;label: mobile
<strong class="bold">  mediaQuery: ‘’</strong>
&#160;&#160;weight: 0
&#160;&#160;multipliers:
&#160;&#160;&#160;&#160;- 1x
mydesign.narrow:
&#160;&#160;label: narrow
<strong class="bold">  mediaQuery: ‘all and (min-width: 560px) and (max-width: 850px)’</strong>
&#160;&#160;weight: 1
&#160;&#160;multipliers:
&#160;&#160;&#160;&#160;- 1x
mydesign.wide:
&#160;&#160;label: wide
<strong class="bold">  mediaQuery: ‘all and (min-width: 851px)’</strong>
&#160;&#160;weight: 2
&#160;&#160;multipliers:
&#160;&#160;&#160;&#160;- 1x</pre>			<p>Note the use of <strong class="source-inline">mediaQuery</strong> in the<a id="_idIndexMarker398"></a> code sample, bolded in the preceding code, which helps provide the sizing criteria of displays mapped to a breakpoint recognized <span class="No-Break">by Drupal.</span></p>
			<p><strong class="bold">Responsive image</strong> is a <a id="_idIndexMarker399"></a>second module that harnesses breakpoints and uses a new feature in CSS3 to adjust to devices. It creates logical groupings that build on media queries and maps image styles. It provides support for standalone responsive image logic or integration with breakpoints defined in themes. The following figure demonstrates the configuration for one responsive <span class="No-Break">image definition:</span></p>
			<div>
				<div id="_idContainer073" class="IMG---Figure">
					<img src="image/B19491_11_7.jpg" alt="Figure 11.7 – An example responsive image style" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.7 – An example responsive image style</p>
			<p>Please note that the <strong class="bold">Sizes</strong> field resembles media query definitions and the selection of existing image styles. The fallback image style allows a responsive image style to default to an image style if multiple styles match or no <span class="No-Break">styles match.</span></p>
			<p>Images extend basic <a id="_idIndexMarker400"></a>file functionality by harnessing standard file management combined with image-specific features layered on top. This helps provide more advanced content management for images, such as a more native image display, different image styles, and responsive <span class="No-Break">display i<a id="_idTextAnchor340"></a>ntegration.</span></p>
			<h1 id="_idParaDest-185"><a id="_idTextAnchor341"></a>Media</h1>
			<p><strong class="bold">Media</strong> extends both files and<a id="_idIndexMarker401"></a> images to provide more centralized management of digital assets and perform greater integrations across assets managed by Drupal and assets managed outside of Drupal. This centralized management offers a different experience for managing assets and structured content. Out of the box, media works well with files and images but has tools such as oEmbed to work with remote, third-party assets such as YouTube, Instagram, <span class="No-Break">and more.</span></p>
			<p>The media framework provided by Drupal allowed the community to produce a vast ecosystem of media-related modules found on drupal.org. <strong class="bold">Media</strong> has been extended for Google Docs, Spotify, social networks, and much more. The framework allows media sources for custom systems, which, in turn, allows Drupal to integrate media throughout <span class="No-Break">an enterprise.</span></p>
			<p>Media types provide a structured, fieldable entity type for digital assets and metadata. A media reference field offers integration with other entities that can associate specific media entities through the media’s native <span class="No-Break">management experience.</span></p>
			<p>The most <a id="_idIndexMarker402"></a>popular media management experience is known as the media library. It is a visual catalog organized by media type and allows you to easily search through media and add new media all in one screen. This works well with media fields, given it provides a more visual experience to select or add media and subsequently associate it with the base entity. A similar experience exists with Drupal’s WYSIWYG, where media can be embedded within a <span class="No-Break">W<a id="_idTextAnchor342"></a>YSIWYG field.</span></p>
			<h2 id="_idParaDest-186"><a id="_idTextAnchor343"></a>Modules and configuration</h2>
			<p><strong class="bold">Media</strong> has two primary<a id="_idIndexMarker403"></a> modules – the <strong class="bold">Media</strong> module for the general features and the <strong class="bold">Media Library</strong> module for the enhanced cataloging experience. Enabling the <strong class="bold">Media</strong> module provides basic constructs, such as the default media listing found at <strong class="source-inline">admin/content/media</strong>, which resembles the central file listing in <span class="No-Break"><em class="italic">Figure 11</em></span><em class="italic">.1</em>. General media settings can be found at <strong class="source-inline">admin/config/media/media-settings</strong>, and they can help address some use cases. However, the area shown in the following figure, which can be found at <strong class="source-inline">admin/structure/media</strong>, shows the media type listing that’s used to configure <span class="No-Break">media types:</span></p>
			<div>
				<div id="_idContainer074" class="IMG---Figure">
					<img src="image/B19491_11_8.jpg" alt="Figure 11.8 – Management listing of media types" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.8 – Management listing of media types</p>
			<p>Note that this<a id="_idIndexMarker404"></a> figure exemplifies both media assets owned by Drupal and a remote, third-party video asset. Configuring any of the media types resembles the same fieldable entity interface, such as managing a content type to configure fields, manage displays, and more, as we covered in <span class="No-Break">previous chapters.</span></p>
			<p>Like images and files, a media field exists for integration with fieldable entity types. The field settings show the selection of media types you can find when <span class="No-Break">creating fields:</span></p>
			<div>
				<div id="_idContainer075" class="IMG---Figure">
					<img src="image/B19491_11_9.jpg" alt="Figure 11.9 – Field settings for media fields" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.9 – Field settings for media fields</p>
			<p>The reference method allows you to select the “default” media type selection or use <strong class="bold">Views</strong> to have more fine-grained control of media selection. You can do this by using the <strong class="bold">Views</strong> native <span class="No-Break">filtering capabilities.</span></p>
			<p>The authoring experience of the media field depends on whether or not the media library is enabled. The following figure demonstrates the default media authoring experience for the “Related assets” <span class="No-Break">media field:</span></p>
			<div>
				<div id="_idContainer076" class="IMG---Figure">
					<img src="image/B19491_11_10.jpg" alt="Figure 11.10 – Default media authoring experience" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.10 – Default media authoring experience</p>
			<p>This experience <a id="_idIndexMarker405"></a>primarily relies on the metadata of images, such as the name of the media. Given a lot of assets are visual, including images and videos, this type of experience is commonly less ideal. This was what motivated the use of Drupal’s <strong class="bold">Media Library</strong>. After installing the <strong class="bold">Media Library</strong> module, field settings can be updated to use the <strong class="bold">Media Library</strong> field widget, as shown in the <span class="No-Break">following figure:</span></p>
			<div>
				<div id="_idContainer077" class="IMG---Figure">
					<img src="image/B19491_11_11.jpg" alt="Figure 11.11 – Changing the field widget for Media Library" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.11 – Changing the field widget for Media Library</p>
			<p>This figure demonstrates <a id="_idIndexMarker406"></a>how the example-related assets field was switched to the <strong class="bold">Media Library</strong> widget for the article content type. Then, the authoring experience updates to use the media library for this field, as shown by the <span class="No-Break">following figure:</span></p>
			<div>
				<div id="_idContainer078" class="IMG---Figure">
					<img src="image/B19491_11_12.jpg" alt="Figure 11.12 – Authoring experience for fields with Media Library" />
				</div>
			</div>
			<p class="IMG---Caption" lang="en-US" xml:lang="en-US">Figure 11.12 – Authoring experience for fields with Media Library</p>
			<p>Media types that were configured for the field are displayed on the left. The ability to add new media is native in <strong class="bold">Media Library</strong>, as shown by the <strong class="bold">Add fields</strong> section per media type. And, while this figure does not contain any images yet, any available media would be visually displayed where “no media available” is listed for selection. This type of experience is often easier for content authors as they can visualize images or thumbnails of videos so that they can incorporate them into their <span class="No-Break">Drupal-managed content.</span></p>
			<p>Media helps Drupal solve challenges around the experience of digital assets and helps build the breadth of functionality for assets managed by Drupal and those managed by remote, third-party services. While media features naturally extend both file and image functionality, they have the potential to have more robust structured content through media types and a far greater ecosystem of media-related integrations that help media incorporate a broader set of third-party systems or custom <span class="No-Break">enterprise <a id="_idTextAnchor344"></a>capabilities.</span></p>
			<h1 id="_idParaDest-187"><a id="_idTextAnchor345"></a>Use cases</h1>
			<p>Files, images, and media <a id="_idIndexMarker407"></a>can be used in different ways and are exemplified in the followi<a id="_idTextAnchor346"></a>ng <span class="No-Break">use cases.</span></p>
			<h2 id="_idParaDest-188"><a id="_idTextAnchor347"></a>Creating research papers</h2>
			<p>Suppose that researchers are Drupal users who can highlight their publications in the content management system for their academic institution. A researcher can also be a user role in Drupal, which allows for fine-grained access control of that persona. This use case can be completed by linking file fields to the research papers content type. Most research papers are published as PDF files, not images or videos. Follow these steps to perform the site building that’s needed for this <span class="No-Break">use case:</span></p>
			<ol>
				<li>Create a research paper content type <span class="No-Break">under </span><span class="No-Break"><strong class="source-inline">admin/structure/types/add</strong></span><span class="No-Break">.</span></li>
				<li>Add a file field to the new content type that’s restricted to PDF <span class="No-Break">file extensions.</span></li>
				<li>Manage the display of the research papers content type to create a teaser display that provides a simple link to the research paper <span class="No-Break">file field.</span></li>
				<li>Grant the researcher role permissions to add and edit their publications <span class="No-Break">at </span><span class="No-Break"><strong class="source-inline">admin/people/permissions</strong></span><span class="No-Break">.</span></li>
			</ol>
			<p>This effectively enables the authoring experience of <span class="No-Break">research papers.</span></p>
			<p>An additional use case is displaying publications on the researcher’s user profile. You can use Views to <span class="No-Break">do this:</span></p>
			<ol>
				<li>Create a new View form called <strong class="source-inline">admin/structure/views/add</strong> that shows the content of research papers with the “create a block” <span class="No-Break">selection checked.</span></li>
				<li>Enable the block to show the teaser display mode for the research papers <span class="No-Break">content type.</span></li>
				<li>Create a contextual filter for the author of the research paper based on the page being accessed (in this example, the user <span class="No-Break">profile page).</span></li>
				<li>Go to the block <span class="No-Break">placement page.</span></li>
				<li>Find the research papers block, drag it into the desired theme region, and <span class="No-Break">press </span><span class="No-Break"><strong class="bold">Save</strong></span><span class="No-Break">.</span></li>
				<li>Edit the research papers block and, under <strong class="bold">Visibility</strong>, select the <strong class="bold">Pages</strong> tab and enter <strong class="source-inline">user/*</strong> to restrict the block visibility to <span class="No-Break">user pages.</span></li>
			</ol>
			<p>This allows the site builder to create a feature for research papers and display each researcher’s papers on their<a id="_idTextAnchor348"></a> <span class="No-Break">user profile.</span></p>
			<h2 id="_idParaDest-189"><a id="_idTextAnchor349"></a>Icons for sports</h2>
			<p>Drupal’s taxonomy system <a id="_idIndexMarker408"></a>is a common entity that’s used for categorization. However, many designs that display content show images that represent the categorization. Exploring the use case of sports, each sport may be a category but visually, an icon could be a stick for hockey, a ball for baseball, or a soccer ball for soccer. The following example assumes image fields are enabled and that there is a configured thumbnail image style. This use case can be performed with an image field linked to a <span class="No-Break">taxonomy term:</span></p>
			<ol>
				<li>Create a <strong class="source-inline">sports</strong> taxonomy vocabulary <span class="No-Break">at </span><span class="No-Break"><strong class="source-inline">admin/structure/taxonomy</strong></span><span class="No-Break">.</span></li>
				<li>Select <strong class="bold">manage fields</strong> in the vocabulary and add an image field for <span class="No-Break">the </span><span class="No-Break"><strong class="source-inline">icon</strong></span><span class="No-Break">.</span></li>
				<li>Select <strong class="bold">manage displays</strong> in the vocabulary and press the gear next to <span class="No-Break">the icon.</span></li>
				<li>Select <strong class="bold">thumbnail</strong> for the <span class="No-Break">image style.</span></li>
			</ol>
			<p>This effectively configured an icon for a sports taxonomy and configured the display of a sports taxonomy to show a thumbnail of the icon in<a id="_idTextAnchor350"></a> <span class="No-Break">its displays.</span></p>
			<h2 id="_idParaDest-190"><a id="_idTextAnchor351"></a>Tutorials found in YouTube videos</h2>
			<p>Media provides support for remote assets based on oEmbed that address this use case. After enabling the <strong class="bold">Media</strong> module, a default media type exists for remote videos that can be harnessed. Follow these steps to <span class="No-Break">enable this:</span></p>
			<ol>
				<li>Create a <strong class="source-inline">tutorial</strong> <span class="No-Break">content type.</span></li>
				<li>Add and configure a media field for the content type that’s limited to the <strong class="source-inline">remote video</strong> <span class="No-Break">media type.</span></li>
				<li>Configure the desired display settings in the tutorial to ensure the video is rendered <span class="No-Break">as desired.</span></li>
			</ol>
			<p>Note that the <strong class="source-inline">Media</strong> module offered fields that were specific for the remote video media type, which is key to understanding the differentiated value of the <strong class="bold">Media</strong> system. This created structured<a id="_idIndexMarker409"></a> content for tutorials that harnessed the media reference field for<a id="_idTextAnchor352"></a> <span class="No-Break">YouTube videos.</span></p>
			<h1 id="_idParaDest-191"><a id="_idTextAnchor353"></a>Summary</h1>
			<p>Digital assets have become an integral part of content management, especially as mobile phones have become more ubiquitous. Content management has had to better support photos and videos and integrate with third-party services, such as social media, that readily incorporate digital assets. Drupal affords a customizable experience through its files, images, and media features, all of which address these use cases. Files provide the foundation for Drupal to manage an asset. Images help offer specific capabilities, such as image styles and responsive images, that provide more targeted content management. Finally, media helps offer tools for a more robust structured content mechanism and refined experience that helps you manage digital assets <span class="No-Break">more broadly.</span></p>
			<p>In the next chapter, we’ll learn how to implement search <span class="No-Break">within Drupal.</span></p>
		</div>
	</body>
</html>
