<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-GB" xmlns:epub="http://www.idpf.org/2007/ops">
	<head>
		<title>B19491_Appendix</title>
		<link href="css/style-JRserifv6.css" rel="stylesheet" type="text/css" />
	</head>
	<body id="B19491_Appendix">
		<div id="_idContainer148">
			<h1 id="_idParaDest-361"><a id="_idTextAnchor683"></a>Appendix A - <br />Drupal Terminology</h1>
			<p><a id="_idTextAnchor684"></a>Drupal has a lot of “Drupal-isms” that define key concepts or features. This terminology is fairly niche. Understanding this terminology is critical for ongoing success building Drupal applications. It can be as simple as being able to understand documentation to being able to effectively file issues in project issue queues. Terminology is commonly used on project pages and builders can rapidly evaluate what a module does simply by reading the description and understanding the <span class="No-Break">problems solved.</span></p>
			<p>Drupal leverages common words or phrases that have specific meaning in the community. Understanding this terminology is a significant enabler for those wanting to learn Drupal. Site builders who know the terminology can more rapidly evaluate community projects. Developers who read documentation can more effectively create custom modules. And, any community member up to speed on “Drupal-isms” will be far more prepared to collaborate and get help from community members. While this chapter may not cover everything, it should provide a foundation for your journey <span class="No-Break">in Drupal.</span></p>
			<p>This chapter can serve as a quick reference to help review terminology, <span class="No-Break">as needed.</span></p>
			<h1 id="_idParaDest-362"><a id="_idTextAnchor685"></a><a id="_idTextAnchor686"></a>Terminology</h1>
			<ul>
				<li><strong class="bold">Drupal</strong>: An open source digital experience application <span class="No-Break">and framework.</span></li>
				<li><strong class="bold">Core</strong>: The basic features and framework required for any <span class="No-Break">Drupal application.</span></li>
				<li><strong class="bold">Project</strong>: A feature or capability that builds upon <span class="No-Break">Drupal’s framework</span></li>
				<li><strong class="bold">Module</strong>: A project that changes or enhances Drupal’s backend behavior <span class="No-Break">or functionality</span></li>
				<li><strong class="bold">Theme</strong>: A project that changes the look and feel of Drupal’s rendering or <span class="No-Break">administrative area</span></li>
				<li><strong class="bold">Site Building</strong>: An activity that installs and configures projects within a Drupal application without <span class="No-Break">hands-on coding</span></li>
				<li><strong class="bold">Theming</strong>: An activity that creates Drupal themes that includes CSS, JavaScript, templates, <span class="No-Break">and metadata</span></li>
				<li><strong class="bold">Templates</strong>: Markup and variables represented as Twig that get converted to rendered content during the <span class="No-Break">render pipeline</span></li>
				<li><strong class="bold">Issue</strong>: A specific bug, feature request, or help request filed into a project’s issue queue by a community member with a status, comments, relevant project version, and <span class="No-Break">other metadata.</span></li>
				<li><strong class="bold">Issue Queue</strong>: A record of all issues for a <span class="No-Break">specific project.</span></li>
				<li><strong class="bold">Entity types</strong>: A data structure that consists of fields <span class="No-Break">and properties.</span></li>
				<li><strong class="bold">Entity</strong>: An instance of an <span class="No-Break">entity type</span></li>
				<li><strong class="bold">Bundle</strong>: An extension of an entity type for categorization and/or additional fields <span class="No-Break">or properties.</span></li>
				<li><strong class="bold">Property</strong>: Static metadata of <span class="No-Break">an entity</span></li>
				<li><strong class="bold">Field</strong>: A specific, atomic attribute of an entity used to organize content with a defined <span class="No-Break">field type</span></li>
				<li><strong class="bold">Field Type</strong>: A specific definition and validation of field values for <span class="No-Break">data integrity</span></li>
				<li><strong class="bold">Fieldable</strong>: A behavior of an entity type that allows for fields to be added to <span class="No-Break">entity types.</span></li>
				<li><strong class="bold">Node</strong>: An entity of a content type that <span class="No-Break">renders content</span></li>
				<li><strong class="bold">Content Type</strong>: A bundle <span class="No-Break">for nodes</span></li>
				<li><strong class="bold">Taxonomy</strong>: A type of entity for <span class="No-Break">hierarchical categorization</span></li>
				<li><strong class="bold">Term</strong>: An entity within a <span class="No-Break">specific taxonomy</span></li>
				<li><strong class="bold">Blocks</strong>: A fieldable type of entity used for structuring reusable content segments that are shared <span class="No-Break">across pages</span></li>
				<li><strong class="bold">Block Type</strong>: A bundle <span class="No-Break">for blocks</span></li>
				<li><strong class="bold">Block</strong>: An entity of a <span class="No-Break">block type</span></li>
				<li><strong class="bold">Paragraphs</strong>: A popular contributed module that provides structured, fieldable content components, similar to blocks, that has a vibrant ecosystem of sub and <span class="No-Break">contributed modules</span></li>
				<li><strong class="bold">Paragraph Type</strong>: Different paragraph <span class="No-Break">content structures</span></li>
				<li><strong class="bold">Menu</strong>: A hierarchical entity type used for handling navigation links as <span class="No-Break">menu items</span></li>
				<li><strong class="bold">Path</strong>: The URI used for Drupal’s routing to map a browser request to Drupal’s <span class="No-Break">rendering system</span></li>
				<li><strong class="bold">Revision</strong>: A log of changes to an entity that allow for reversion and tracking <span class="No-Break">of changes</span></li>
				<li><strong class="bold">Watchdog</strong>: Drupal’s logging system that covers system logs, Drupal application logs, <span class="No-Break">and more</span></li>
				<li><strong class="bold">Migrate</strong>: A subsystem in Drupal used to manage and execute ETL (extract, transform, and load) commonly used to load content into a <span class="No-Break">Drupal application</span></li>
				<li><strong class="bold">Migration</strong>: Logic and directives executed to migrate specific content, typically creating <span class="No-Break">Drupal entities</span></li>
				<li><strong class="bold">Configuration</strong>: A Drupal subsystem used to manage Drupal core and project settings that modify Drupal behaviors; loaded by the database but managed and synchronized through <span class="No-Break">the filesystem</span></li>
				<li><strong class="bold">Contrib</strong>: A synonym for Drupal’s open source contributed community projects, often differentiated <span class="No-Break">from core</span></li>
				<li><strong class="bold">Custom</strong>: Drupal projects that are created only for specific application requirements and not contributed to the open <span class="No-Break">source community</span></li>
				<li><strong class="bold">Drush</strong>: Drupal’s contributed command line interface with commands that execute on a <span class="No-Break">Drupal application</span></li>
				<li><strong class="bold">Files</strong>: A subsystem used to manage file content for file fields or files uploaded through <span class="No-Break">the WYSIWYG</span></li>
				<li><strong class="bold">Media</strong>: A subsystem that manages uploaded and external digital assets within a Drupal application; has a large number of submodules and contributed community projects capable of commonly supporting advanced features and <span class="No-Break">external platforms</span></li>
				<li><strong class="bold">Image Styles</strong>: Configuration that transforms uploaded image files to various sizes <span class="No-Break">and formats</span></li>
				<li><strong class="bold">Views</strong>: A feature of Drupal that queries entities, offers display settings, and manages different dynamic outputs like pages, blocks, or various <span class="No-Break">data formats</span></li>
				<li><strong class="bold">User</strong>: A subsystem used for allowing people to authenticate into Drupal to perform content management, site building, operations, or <span class="No-Break">manage configuration</span></li>
				<li><strong class="bold">Permission</strong>: A capability granted to a Drupal user to perform a <span class="No-Break">specific action.</span></li>
				<li><strong class="bold">Static</strong>: Aspects of a Drupal application that are fixed and cannot readily be updated through the content management features or <span class="No-Break">through configuration</span></li>
				<li><strong class="bold">Dynamic</strong>: Aspects of a Drupal application that are not fixed and can readily be updated through the content management features or <span class="No-Break">through configuration</span></li>
				<li><strong class="bold">Composer</strong>: Drupal’s selected code dependency management tool widely adopted by the <span class="No-Break">PHP ecosystem</span></li>
				<li><strong class="bold">Render</strong>: The logic used by Drupal’s application to leverage the context of a specific request, perform processing, and return dynamic output that represents the <span class="No-Break">provided context</span></li>
				<li><strong class="bold">Platform</strong>: Often refers to the environments, tools, and servers that are used to run and manage a <span class="No-Break">Drupal application</span></li>
				<li><strong class="bold">Framework</strong>: A collection of APIs and conventions provided by Drupal core and installed projects that allow for developers to create custom projects that extend <span class="No-Break">Drupal’s application</span></li>
				<li><strong class="bold">API</strong>: A defined, standardized interface used to allow developers to create software that integrates with a specific <span class="No-Break">Drupal subsystem</span></li>
				<li><strong class="bold">JSON API</strong>: Drupal core’s adopted web service standard often used to deliver Drupal content in a conventional data format to <span class="No-Break">external clients</span></li>
				<li><strong class="bold">WYSIWYG</strong>: A type of field in Drupal that allows for less structured content by giving content authors more autonomy to style and organize content within <span class="No-Break">one field</span></li>
				<li><strong class="bold">CKEditor</strong>: An external open source project adopted by Drupal core for a <span class="No-Break">WYSIWYG feature</span></li>
			</ul>
		</div>
	</body>
</html>
